import React, { useState, useEffect } from 'react';
import {
  Box,
  Container,
  Heading,
  Text,
  SimpleGrid,
  Button,
  useDisclosure,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalCloseButton,
  FormControl,
  FormLabel,
  Input,
  Textarea,
  Stack,
  useToast,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Badge,
  IconButton,
} from '@chakra-ui/react';
import { FiEdit2, FiTrash2, FiPlus } from 'react-icons/fi';
import { local_market_backend } from '../../../declarations/local_market_backend';

export default function SellerDashboard() {
  const [shop, setShop] = useState(null);
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const toast = useToast();
  const {
    isOpen: isShopModalOpen,
    onOpen: onShopModalOpen,
    onClose: onShopModalClose,
  } = useDisclosure();
  const {
    isOpen: isProductModalOpen,
    onOpen: onProductModalOpen,
    onClose: onProductModalClose,
  } = useDisclosure();

  useEffect(() => {
    fetchSellerData();
  }, []);

  const fetchSellerData = async () => {
    try {
      const principal = await window.ic.plug.getPrincipal();
      const shopData = await local_market_backend.get_shop_by_owner(principal);
      if (shopData) {
        setShop(shopData);
        const productsData = await local_market_backend.get_shop_products(
          shopData.id
        );
        setProducts(productsData);
      }
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Failed to fetch seller data',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    }
    setLoading(false);
  };

  const handleCreateShop = async (data) => {
    try {
      const result = await local_market_backend.create_shop(
        data.name,
        data.description,
        {
          latitude: parseFloat(data.latitude),
          longitude: parseFloat(data.longitude),
          address: data.address,
          geohash: '', // Will be generated by the backend
        },
        data.contact
      );
      setShop(result);
      toast({
        title: 'Success',
        description: 'Shop created successfully',
        status: 'success',
        duration: 5000,
        isClosable: true,
      });
      onShopModalClose();
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Failed to create shop',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    }
  };

  const handleAddProduct = async (data) => {
    try {
      const result = await local_market_backend.add_product(
        shop.id,
        data.name,
        data.description,
        parseFloat(data.price),
        data.category,
        data.images.split(',').map((url) => url.trim())
      );
      setProducts([...products, result]);
      toast({
        title: 'Success',
        description: 'Product added successfully',
        status: 'success',
        duration: 5000,
        isClosable: true,
      });
      onProductModalClose();
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Failed to add product',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    }
  };

  const handleDeleteProduct = async (productId) => {
    try {
      await local_market_backend.delete_product(productId);
      setProducts(products.filter((p) => p.id !== productId));
      toast({
        title: 'Success',
        description: 'Product deleted successfully',
        status: 'success',
        duration: 5000,
        isClosable: true,
      });
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Failed to delete product',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    }
  };

  if (loading) {
    return <Text>Loading...</Text>;
  }

  return (
    <Container maxW="container.xl">
      <Stack spacing={8}>
        <Box>
          <Heading mb={4}>Seller Dashboard</Heading>
          {!shop ? (
            <Box textAlign="center" py={10}>
              <Text mb={4}>You haven't created a shop yet</Text>
              <Button onClick={onShopModalOpen} leftIcon={<FiPlus />}>
                Create Shop
              </Button>
            </Box>
          ) : (
            <>
              <Box
                p={6}
                borderWidth="1px"
                borderRadius="lg"
                bg="white"
                shadow="sm"
              >
                <Heading size="md" mb={4}>
                  Shop Details
                </Heading>
                <SimpleGrid columns={{ base: 1, md: 2 }} spacing={4}>
                  <Box>
                    <Text fontWeight="bold">Name:</Text>
                    <Text>{shop.name}</Text>
                  </Box>
                  <Box>
                    <Text fontWeight="bold">Contact:</Text>
                    <Text>{shop.contact}</Text>
                  </Box>
                  <Box>
                    <Text fontWeight="bold">Address:</Text>
                    <Text>{shop.location.address}</Text>
                  </Box>
                  <Box>
                    <Text fontWeight="bold">Verification Status:</Text>
                    <Badge
                      colorScheme={shop.is_verified ? 'green' : 'yellow'}
                    >
                      {shop.is_verified ? 'Verified' : 'Pending'}
                    </Badge>
                  </Box>
                </SimpleGrid>
              </Box>

              <Box mt={8}>
                <Flex justify="space-between" align="center" mb={4}>
                  <Heading size="md">Products</Heading>
                  <Button
                    onClick={onProductModalOpen}
                    leftIcon={<FiPlus />}
                    colorScheme="brand"
                  >
                    Add Product
                  </Button>
                </Flex>

                <Table variant="simple">
                  <Thead>
                    <Tr>
                      <Th>Name</Th>
                      <Th>Category</Th>
                      <Th isNumeric>Price</Th>
                      <Th>Status</Th>
                      <Th>Actions</Th>
                    </Tr>
                  </Thead>
                  <Tbody>
                    {products.map((product) => (
                      <Tr key={product.id}>
                        <Td>{product.name}</Td>
                        <Td>{product.category}</Td>
                        <Td isNumeric>â‚¹{product.price}</Td>
                        <Td>
                          <Badge
                            colorScheme={product.available ? 'green' : 'red'}
                          >
                            {product.available ? 'In Stock' : 'Out of Stock'}
                          </Badge>
                        </Td>
                        <Td>
                          <IconButton
                            icon={<FiEdit2 />}
                            aria-label="Edit product"
                            mr={2}
                            size="sm"
                          />
                          <IconButton
                            icon={<FiTrash2 />}
                            aria-label="Delete product"
                            colorScheme="red"
                            size="sm"
                            onClick={() => handleDeleteProduct(product.id)}
                          />
                        </Td>
                      </Tr>
                    ))}
                  </Tbody>
                </Table>
              </Box>
            </>
          )}
        </Box>
      </Stack>

      {/* Create Shop Modal */}
      <Modal isOpen={isShopModalOpen} onClose={onShopModalClose}>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>Create Shop</ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            <form
              onSubmit={(e) => {
                e.preventDefault();
                const formData = new FormData(e.target);
                handleCreateShop(Object.fromEntries(formData));
              }}
            >
              <Stack spacing={4}>
                <FormControl isRequired>
                  <FormLabel>Shop Name</FormLabel>
                  <Input name="name" />
                </FormControl>
                <FormControl isRequired>
                  <FormLabel>Description</FormLabel>
                  <Textarea name="description" />
                </FormControl>
                <FormControl isRequired>
                  <FormLabel>Contact</FormLabel>
                  <Input name="contact" type="tel" />
                </FormControl>
                <FormControl isRequired>
                  <FormLabel>Address</FormLabel>
                  <Input name="address" />
                </FormControl>
                <FormControl isRequired>
                  <FormLabel>Latitude</FormLabel>
                  <Input name="latitude" type="number" step="any" />
                </FormControl>
                <FormControl isRequired>
                  <FormLabel>Longitude</FormLabel>
                  <Input name="longitude" type="number" step="any" />
                </FormControl>
                <Button type="submit" colorScheme="brand">
                  Create Shop
                </Button>
              </Stack>
            </form>
          </ModalBody>
        </ModalContent>
      </Modal>

      {/* Add Product Modal */}
      <Modal isOpen={isProductModalOpen} onClose={onProductModalClose}>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>Add Product</ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            <form
              onSubmit={(e) => {
                e.preventDefault();
                const formData = new FormData(e.target);
                handleAddProduct(Object.fromEntries(formData));
              }}
            >
              <Stack spacing={4}>
                <FormControl isRequired>
                  <FormLabel>Product Name</FormLabel>
                  <Input name="name" />
                </FormControl>
                <FormControl isRequired>
                  <FormLabel>Description</FormLabel>
                  <Textarea name="description" />
                </FormControl>
                <FormControl isRequired>
                  <FormLabel>Category</FormLabel>
                  <Input name="category" />
                </FormControl>
                <FormControl isRequired>
                  <FormLabel>Price</FormLabel>
                  <Input name="price" type="number" step="any" />
                </FormControl>
                <FormControl>
                  <FormLabel>Image URLs (comma-separated)</FormLabel>
                  <Input name="images" />
                </FormControl>
                <Button type="submit" colorScheme="brand">
                  Add Product
                </Button>
              </Stack>
            </form>
          </ModalBody>
        </ModalContent>
      </Modal>
    </Container>
  );
} 